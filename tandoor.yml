services:
  db_recipes:
    image: postgres:16-alpine
    container_name: tandoor_db
    restart: unless-stopped
    volumes:
      - tandoor_db:/var/lib/postgresql/data
    environment:
      - TZ=Europe/Berlin
    healthcheck:
      test: pg_isready
    env_file:
      - ./env/tandoor.env
    networks:
      tandoor:

  web_recipes:
    image: vabene1111/recipes
    container_name: tandoor_web
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    env_file:
      - ./env/tandoor.env
    volumes:
      - staticfiles:/opt/recipes/staticfiles
      # Do not make this a bind mount, see https://docs.tandoor.dev/install/docker/#volumes-vs-bind-mounts
      - nginx_config:/opt/recipes/nginx/conf.d
      - ./volumes/tandoor/mediafiles:/opt/recipes/mediafiles
    depends_on:
      - db_recipes
    networks:
      tandoor:

  nginx_recipes:
    image: nginx:mainline-alpine
    container_name: tandoor_nginx
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    env_file:
      - ./env/tandoor.env
    depends_on:
      - web_recipes
    volumes:
      # Do not make this a bind mount, see https://docs.tandoor.dev/install/docker/#volumes-vs-bind-mounts
      - nginx_config:/etc/nginx/conf.d:ro
      - staticfiles:/static:ro
      - ./volumes/tandoor/mediafiles:/media:ro
    healthcheck:
      test: curl -f http://localhost || exit 1
    networks:
      traefik:
      tandoor:
    labels:
      - traefik.enable=true
      - traefik.http.routers.tandoor.rule=Host(`tandoor.${DOMAIN}`)
      - traefik.http.services.tandoor.loadbalancer.server.port=80

volumes:
  nginx_config:
  staticfiles:
  tandoor_db:

networks:
  tandoor:
